#define LINE_WAIT 400

#define SOUND_VOLUME 50
#define LEFT_SENSOR (SENSOR_1 - left_offset) * left_gain
#define RIGHT_SENSOR (SENSOR_2 - right_offset) * right_gain
#define BACK_SENSOR (SENSOR_3 - back_offset) * back_gain
#define TO_THE_LEFT LEFT
#define TO_THE_RIGHT RIGHT
#define AROUND 'a'

#define FORCE_TURN_TIME 250

#define MECHANIC_WAIT_TIME 50

#define KP 30.0
#define KI 0.0 // was: 0.5
#define KD 0.0 // was: 0.9
#define TP 30.0
#define SCALE_FACTOR 0.03

#define LCD_POS1 0
#define LCD_POS2 64
#define INIT 0
#define BLACK_THRESHOLD 40 // was: 30
#define CAREFUL_SPEED 99
#define FAST_SPEED 99
#define SPEED_LIMIT 99
#define MIN_SPEED 50
#define TURN_SPEED 85 // was: 85
#define REALLY_SLOW_TURN_SPEED 40 // was: 40
#define CALIBRATION_TURN_SPEED 40
#define CALIBRATION_TURN_TIME 1660 // was: 1660
#define BACK_UP_TIME 350

#define UP 'u'
#define DOWN 'd'
#define LEFT 'l'
#define RIGHT 'r'
// Edit file >route< to change the route and run >routecleaner< script using Ctrl+Alt+G. DO NOT CHANGE LINE NUMBERS!
const char route[] = {'r','d','d','d','l','l','l','L','U','d','d','l','l','u','R','R','R','R','R','d','r','U','U','r','u','u','l','l','d','R','R','l','d','d','l','l','u','L','u','u','l','l','d','R','u','r','D','D','u','l','l','D','R','d','R','R','R','d','r','U','U','r','u','u','r','r','d','L','u','l','D','u','l','l','d','R','d','d','l','l','l','l','u','u','r','D','l','d','R','R','R','d','r','U','U','U','l','u','R','d','d','d','l','l','l','l','d','l','l','u','R','R','R','R','R','d','r','U','U','s'};
#define ROUTE_LENGTH 119

#define TURN_ON_DIME 50

struct intchar {
	int n;
	char c;
	bool p;
};

int lines_global = INIT;
mutex lines_global_mtx;
mutex motor_control_mtx;

float left_white_offset = INIT;
float left_black_offset = INIT;
float right_white_offset = INIT;
float right_black_offset = INIT;
float back_white_offset = INIT;
float back_black_offset = INIT;

float left_offset = INIT;
float right_offset = INIT;
float back_offset = INIT;
float left_gain = INIT;
float right_gain = INIT;
float back_gain = INIT;

char orientation = UP;
char last_orientation = UP;

char route_raw[ROUTE_LENGTH + 1];
intchar route_short[ROUTE_LENGTH + 1];
int route_length_raw = INIT;
int route_length_short = INIT;
int rt_pos = INIT;

unsigned long firsttick = INIT, lasttick = INIT;

int Tp = TP, left = INIT, right = INIT, error = INIT, integral = INIT, 
		derivative = INIT, turn = INIT, motor_a = INIT, motor_b = INIT, 
		last_error = INIT;

bool all_done = false;

void init_sensors() // works
{
	SetSensorType(S1, SENSOR_TYPE_LIGHT_ACTIVE);
	ResetSensor(S1);
	SetSensorType(S2, SENSOR_TYPE_LIGHT_ACTIVE);
	ResetSensor(S2);
	SetSensorType(S3, SENSOR_TYPE_LIGHT_ACTIVE);
	ResetSensor(S3);
	SetSensorTouch(S4);
	ResetSensor(S4);
}

void un_sensor() //works
{
	SetSensorTouch(S1);
	ResetSensor(S1);
	SetSensorTouch(S2);
	ResetSensor(S2);
	SetSensorTouch(S3);
	ResetSensor(S3);
}

void init_pid_variables() // works, duh. How could it not work?
{
	last_error = INIT;
	derivative = INIT;
	integral = INIT;
}

void search_for_long_stretches() // works
{
	int i = INIT, j = INIT, k = INIT;

	for (; i < route_length_raw;) {
		route_short[k].c = route_raw[i];
		route_short[k].p = false;
		route_short[k].n = INIT;

		if (isupper(route_raw[i])) {
			route_short[k].n++;
		}
		for (j = i; j < route_length_raw; j++) {
			if (route_raw[i] == route_raw[j]) {
				route_short[k].n++;
			} else {
				break;
			}
		}

		i = j;
		k++;
	}
	route_short[k].c = 's';
	route_length_short = k;
}

void search_for_pushes() // works
{
	for (int i = INIT; i < route_length_short; i++) {
		if (route_short[i].c == 'U' || route_short[i].c == 'D' ||
			route_short[i].c == 'L' || route_short[i].c == 'R') {
			route_short[i].p = true;
		}
	}
}

void prepare_route() // works
{
	char val;

	for (int i = INIT; i < ROUTE_LENGTH + 1; i++) {
		val = route[i];
		if (val != 'u' && val != 'U' && val != 'd' && val != 'D' &&
			val != 'r' && val != 'R' && val != 'l' && val != 'L') {
			route_raw[i] = 's';
			route_length_raw = i;
			break;
		} else {
			route_raw[i] = val;
		}
	}
}

void auto_calibrate() // works
{
	int left, right, back;
	int left_max = INIT, right_max = INIT, back_max = INIT;
	int left_min = 1024, right_min = 1024, back_min = 1024;
	Acquire(motor_control_mtx);
	OnFwd(OUT_A, CALIBRATION_TURN_SPEED);
	OnRev(OUT_C, CALIBRATION_TURN_SPEED);
	// OnRevSync(OUT_AC, CALIBRATION_TURN_SPEED, TURN_ON_DIME);
	Release(motor_control_mtx);

	TextOut(LCD_POS1, LCD_LINE1, "L, min");
	TextOut(LCD_POS1, LCD_LINE2, "L, max");
	TextOut(LCD_POS1, LCD_LINE4, "R, min");
	TextOut(LCD_POS1, LCD_LINE5, "R, max");
	TextOut(LCD_POS1, LCD_LINE7, "B, min");
	TextOut(LCD_POS1, LCD_LINE8, "B, max");

	for (int i = 0; i < CALIBRATION_TURN_TIME; i++) {
		left = SENSOR_1;
		right = SENSOR_2;
		back = SENSOR_3;

		if (left > left_max) {
			left_max = left;
			//The outputting in this function works as a little wait function.
			TextOut(LCD_POS2, LCD_LINE2, "    ");
			NumOut(LCD_POS2, LCD_LINE2, left_max);
		} else if (left < left_min) {
			left_min = left;
			TextOut(LCD_POS2, LCD_LINE1, "    ");
			NumOut(LCD_POS2, LCD_LINE1, left_min);
		}
		
		if (right > right_max) {
			right_max = right;
			TextOut(LCD_POS2, LCD_LINE5, "    ");
			NumOut(LCD_POS2, LCD_LINE5, right_max);
		} else if (right < right_min) {
			right_min = right;
			TextOut(LCD_POS2, LCD_LINE4, "    ");
			NumOut(LCD_POS2, LCD_LINE4, right_min);
		}
		
		if (back > back_max) {
			back_max = back;
			TextOut(LCD_POS2, LCD_LINE8, "    ");
			NumOut(LCD_POS2, LCD_LINE8, back_max);
		} else if (back < back_min) {
			back_min = back;
			TextOut(LCD_POS2, LCD_LINE7, "    ");
			NumOut(LCD_POS2, LCD_LINE7, back_min);
		}
		Wait(4); // Ensures that the robot takes at least 4 ms * 1660 = 6.64 s to perform sampling, ensures at least a complete revolution
	}

	PlayToneEx(440, 250, SOUND_VOLUME, false);
	Acquire(motor_control_mtx);
	Off(OUT_AC);
	Release(motor_control_mtx);
	ClearScreen();

	left_gain = 100.0 / (left_max - left_min);
	right_gain = 100.0 / (right_max - right_min);
	back_gain = 100.0 / (back_max - back_min);

	left_offset = left_min;
	right_offset = right_min;
	back_offset = back_min;
}

void pid() // works beautifully - especially as just P controller....
{
	left = LEFT_SENSOR;
	right = RIGHT_SENSOR;

	error = left - right;
	integral += error;
	derivative = error - last_error;
	turn = SCALE_FACTOR * (KP * error + KI * integral + KD * derivative);
	motor_a = Tp + turn;
	motor_b = Tp - turn;

	if (motor_a > SPEED_LIMIT) {
		motor_a = SPEED_LIMIT;
	} else if (motor_a < -SPEED_LIMIT) {
		motor_a = -SPEED_LIMIT;
	}
	if (motor_b > SPEED_LIMIT) {
		motor_b = SPEED_LIMIT;
	} else if (motor_b < -SPEED_LIMIT) {
		motor_b = -SPEED_LIMIT;
	}

	Acquire(motor_control_mtx);
	OnRev(OUT_A, motor_a);
	OnRev(OUT_C, motor_b);
	Release(motor_control_mtx);
	last_error = error;
}

void turn_robot(char direction, bool pushing) // not tested
{
	switch (direction) { //plus is left, negative is right
	case TO_THE_LEFT:
		Acquire(motor_control_mtx);
		OnFwd(OUT_A, TURN_SPEED);
		OnRev(OUT_C, TURN_SPEED);
		Release(motor_control_mtx);
		Wait(FORCE_TURN_TIME);
		while (LEFT_SENSOR > BLACK_THRESHOLD);
		Acquire(motor_control_mtx);
		Off(OUT_AC);
		Release(motor_control_mtx);
		Wait(MECHANIC_WAIT_TIME);
		Acquire(motor_control_mtx);
		OnFwd(OUT_A, TURN_SPEED);
		OnRev(OUT_C, TURN_SPEED);
		Release(motor_control_mtx);
		while (LEFT_SENSOR <= BLACK_THRESHOLD);
		Acquire(motor_control_mtx);
		Off(OUT_AC);
		Release(motor_control_mtx);
		break;
	case TO_THE_RIGHT:
		Acquire(motor_control_mtx);
		OnRev(OUT_A, TURN_SPEED);
		OnFwd(OUT_C, TURN_SPEED);
		Release(motor_control_mtx);
		Wait(FORCE_TURN_TIME);
		while (RIGHT_SENSOR > BLACK_THRESHOLD);
		Acquire(motor_control_mtx);
		Off(OUT_AC);
		Release(motor_control_mtx);
		Wait(MECHANIC_WAIT_TIME);
		Acquire(motor_control_mtx);
		OnRev(OUT_A, TURN_SPEED);
		OnFwd(OUT_C, TURN_SPEED);
		Release(motor_control_mtx);
		while (RIGHT_SENSOR <= BLACK_THRESHOLD);
		Acquire(motor_control_mtx);
		Off(OUT_AC);
		Release(motor_control_mtx);
		break;
	case AROUND: 
		Acquire(motor_control_mtx);
		OnRev(OUT_A, TURN_SPEED);
		OnFwd(OUT_C, TURN_SPEED);	
		Release(motor_control_mtx);
		Wait(FORCE_TURN_TIME);

		switch(pushing) {
			case true:
				while (RIGHT_SENSOR > BLACK_THRESHOLD);
				Acquire(motor_control_mtx);
				Off(OUT_AC);
				Release(motor_control_mtx);
				Wait(MECHANIC_WAIT_TIME);
				Acquire(motor_control_mtx);
				OnRev(OUT_A, REALLY_SLOW_TURN_SPEED);
				OnFwd(OUT_C, REALLY_SLOW_TURN_SPEED);
				Release(motor_control_mtx);
				while (RIGHT_SENSOR <= BLACK_THRESHOLD);
				Acquire(motor_control_mtx);
				Off(OUT_AC);
				Release(motor_control_mtx);
				break;
			case false:
				while (RIGHT_SENSOR > BLACK_THRESHOLD);
				Wait(FORCE_TURN_TIME);
				while (RIGHT_SENSOR > BLACK_THRESHOLD);
				Acquire(motor_control_mtx);
				Off(OUT_AC);
				Release(motor_control_mtx);
				Wait(MECHANIC_WAIT_TIME);
				Acquire(motor_control_mtx);
				OnRev(OUT_A, REALLY_SLOW_TURN_SPEED);
				OnFwd(OUT_C, REALLY_SLOW_TURN_SPEED);
				Release(motor_control_mtx);
				while (RIGHT_SENSOR <= BLACK_THRESHOLD);
				Acquire(motor_control_mtx);
				Off(OUT_AC);
				Release(motor_control_mtx);
		}

		break;
	}

	Acquire(motor_control_mtx);
	Off(OUT_AC);
	Release(motor_control_mtx);
}

bool desired_orientation(char desired, bool pushing) // works
{
	bool orientation_changed = true;
	
	if ((orientation == UP    && desired == DOWN)  ||
		(orientation == DOWN  && desired == UP)    ||
		(orientation == LEFT  && desired == RIGHT) || 
		(orientation == RIGHT && desired == LEFT)) {
		turn_robot(AROUND, pushing);
	} else if ( (orientation == UP    && desired == RIGHT) || 
				(orientation == DOWN  && desired == LEFT)  ||
				(orientation == LEFT  && desired == UP)    ||
				(orientation == RIGHT && desired == DOWN)) {
		turn_robot(TO_THE_RIGHT, pushing);
	} else if ( (orientation == UP    && desired == LEFT)  ||
				(orientation == DOWN  && desired == RIGHT) ||
				(orientation == LEFT  && desired == DOWN)  ||
				(orientation == RIGHT && desired == UP))   {
		turn_robot(TO_THE_LEFT, pushing);
	}
	if (orientation == tolower(desired)) {
		orientation_changed = false;
	}

	last_orientation = orientation;
	orientation = tolower(desired);


	return orientation_changed;
}

void back_away_from_can(bool pushing) // works
{
	Tp = CAREFUL_SPEED;
	bool dump;
	int local_line = 0;
	init_pid_variables();
	
	Acquire(motor_control_mtx);
	OnFwdSync(OUT_AC, FAST_SPEED, 0);
	Release(motor_control_mtx);
	
	Wait(BACK_UP_TIME);
	
	Acquire(motor_control_mtx);
	Off(OUT_AC);
	Release(motor_control_mtx);
	
	// PlayToneEx(1760, 500, SOUND_VOLUME, false);
	// Wait(1000);
	
	switch(orientation) {
		case UP:
		dump = desired_orientation(DOWN, pushing);
		break;
		case DOWN:
		dump = desired_orientation(UP, pushing);
		break;
		case RIGHT:
		dump = desired_orientation(LEFT, pushing);
		break;
		case LEFT:
		dump = desired_orientation(RIGHT, pushing);
		break;
	}
	
	// PlayToneEx(1760, 500, SOUND_VOLUME, false);
	// Wait(1000);

	Wait(MECHANIC_WAIT_TIME);
	Acquire(lines_global_mtx);
	local_line = lines_global;
	Release(lines_global_mtx);

	while (true) {
		pid();
		Acquire(lines_global_mtx);

		if (local_line != lines_global) {
			Release(lines_global_mtx);
			break;
		}

		Release(lines_global_mtx);
	}

	Acquire(motor_control_mtx);
	Off(OUT_AC);
	Release(motor_control_mtx);
}

void drive_forwards(int n, bool pushing) // works
{
	init_pid_variables();
	int local_line = INIT;
	Acquire(lines_global_mtx);
	lines_global = INIT;
	Release(lines_global_mtx);
	
	if (pushing == true) {
		if (n <= 2) {
			Tp = CAREFUL_SPEED;
			
				// PlayToneEx(440, 100, SOUND_VOLUME, false);
			while (true) {
				pid();
				Acquire(lines_global_mtx);
				// PlayToneEx(440, 100, SOUND_VOLUME, false);
				if (left < BLACK_THRESHOLD && right < BLACK_THRESHOLD
					&& lines_global == n - 1) { 
					Release(lines_global_mtx);
					break;
				}

				Release(lines_global_mtx);
			}

			Acquire(motor_control_mtx);
			Off(OUT_AC);
			Release(motor_control_mtx);

			//Wait(FORCE_TURN_TIME);
			// PlayToneEx(880, 150, SOUND_VOLUME, false);
			// Wait(500);
			back_away_from_can(pushing);
			// PlayToneEx(880, 150, SOUND_VOLUME, false);
			// Wait(150);
			// PlayToneEx(440, 150, SOUND_VOLUME, false);
			// Wait(150);
			// PlayToneEx(880, 150, SOUND_VOLUME, false);
			// Wait(250);
			Tp = CAREFUL_SPEED;
			init_pid_variables();

			Acquire(lines_global_mtx);
			lines_global = INIT;
			Release(lines_global_mtx);

			Acquire(motor_control_mtx);
			Off(OUT_AC);
			Release(motor_control_mtx);
		} else if (n > 2) {
			Tp = FAST_SPEED;
			
			while (true) {
				pid();
				Acquire(lines_global_mtx);

				if (lines_global == (n - 1)) {
					Release(lines_global_mtx);
					Tp = CAREFUL_SPEED;
					break;
				}

				Release(lines_global_mtx);
			}

			while (true) {
				pid();

				if (left < BLACK_THRESHOLD && right < BLACK_THRESHOLD) {
					Acquire(motor_control_mtx);
					Off(OUT_AC);
					Release(motor_control_mtx);
					break;
				}
			}

			//Wait(MECHANIC_WAIT_TIME);
			back_away_from_can(pushing);
			// PlayToneEx(440, 150, SOUND_VOLUME, false);
			// Wait(150);
			// PlayToneEx(880, 150, SOUND_VOLUME, false);
			// Wait(150);
			// PlayToneEx(440, 150, SOUND_VOLUME, false);
			// Wait(250);
			// NXC doesn't support recursive calls (BS!!), so here is pushing=false, n=1 implementation:
			Tp = CAREFUL_SPEED;
			init_pid_variables();
			Acquire(lines_global_mtx);
			lines_global = INIT;
			Release(lines_global_mtx);

			// while (true) {
				// pid();
				// Acquire(lines_global_mtx);

			// 	if (lines_global == 1) {
			// 		Release(lines_global_mtx);
			// 		break;
			// 	}

			// 	Release(lines_global_mtx);
			// }

			Acquire(motor_control_mtx);
			Off(OUT_AC);
			Release(motor_control_mtx);
		}
	} else if (pushing == false) {
		if (n == 1) {
			Tp = CAREFUL_SPEED;
			init_pid_variables();
			Acquire(lines_global_mtx);
			lines_global = INIT;
			Release(lines_global_mtx);

			while (true) {
				pid();
				Acquire(lines_global_mtx);

				if (lines_global == n) {
					Release(lines_global_mtx);
					break;
				}

				Release(lines_global_mtx);
			}

			Acquire(motor_control_mtx);
			Off(OUT_AC);
			Release(motor_control_mtx);
		} else if (n > 1) {
			Tp = FAST_SPEED;
			bool once_flag = false;
			Acquire(lines_global_mtx);
			lines_global = INIT;
			Release(lines_global_mtx);
			
			while (true) {
				pid();
				Acquire(lines_global_mtx);

				if (lines_global == (n - 1) && once_flag == false) {
					Release(lines_global_mtx);
					Tp = CAREFUL_SPEED;
					once_flag = true;
				} else if (lines_global == n) {
					Release(lines_global_mtx);
					Acquire(motor_control_mtx);
					Off(OUT_AC);
					Release(motor_control_mtx);
					break;
				}
			
				Release(lines_global_mtx);
			}
		}
	}
}

void done() // works
{
	PlayToneEx(220, 150, SOUND_VOLUME, false);
	Wait(150);
	PlayToneEx(440, 150, SOUND_VOLUME, false);
	Wait(150);
	PlayToneEx(880, 150, SOUND_VOLUME, false);
	Wait(150);
}

void init_route() // works
{
	prepare_route();
	search_for_long_stretches();
	search_for_pushes();
}

void print_orientation() // works
{
	TextOut(LCD_POS1, LCD_LINE1, "Orientation");
	if(islower(route_short[rt_pos].c)){
		switch(orientation) {
			case UP:
			TextOut(LCD_POS1, LCD_LINE2, "up");
			break;
			case DOWN:
			TextOut(LCD_POS1, LCD_LINE2, "down");
			break;
			case RIGHT:
			TextOut(LCD_POS1, LCD_LINE2, "right");
			break;
			case LEFT:
			TextOut(LCD_POS1, LCD_LINE2, "left");
			break;
		}
	} else {
		switch(orientation) {
			case UP:
			TextOut(LCD_POS1, LCD_LINE2, "UP");
			break;
			case DOWN:
			TextOut(LCD_POS1, LCD_LINE2, "DOWN");
			break;
			case RIGHT:
			TextOut(LCD_POS1, LCD_LINE2, "RIGHT");
			break;
			case LEFT:
			TextOut(LCD_POS1, LCD_LINE2, "LEFT");
			break;
		}
		
	}
}

void print_last_orientation() // works
{
	TextOut(LCD_POS1, LCD_LINE4, "Last orientation");
	if(islower(route_short[rt_pos].c)){
		switch(last_orientation) {
			case UP:
			TextOut(LCD_POS1, LCD_LINE5, "up");
			break;
			case DOWN:
			TextOut(LCD_POS1, LCD_LINE5, "down");
			break;
			case RIGHT:
			TextOut(LCD_POS1, LCD_LINE5, "right");
			break;
			case LEFT:
			TextOut(LCD_POS1, LCD_LINE5, "left");
			break;
		}
	} else {
		switch(last_orientation) {
			case UP:
			TextOut(LCD_POS1, LCD_LINE5, "UP");
			break;
			case DOWN:
			TextOut(LCD_POS1, LCD_LINE5, "DOWN");
			break;
			case RIGHT:
			TextOut(LCD_POS1, LCD_LINE5, "RIGHT");
			break;
			case LEFT:
			TextOut(LCD_POS1, LCD_LINE5, "LEFT");
			break;
		}
	}
}

task line_counter() // works - not exactly, fails at turns, grrrr.
{
	int last_value = 0, value = 0, last_line = 0;
	TextOut(LCD_POS1, LCD_LINE7, "Lines");

	while (true) {
		last_value = value;

		value = BACK_SENSOR;

		if (last_value > BLACK_THRESHOLD && value <= BLACK_THRESHOLD) {
			Acquire(lines_global_mtx);
			if (last_line == 0 || lines_global != last_line + 1) {
				lines_global++;
			} else {
				last_line = 0;
			}
			NumOut(LCD_POS2, LCD_LINE7, lines_global);
			Release(lines_global_mtx); 
			Wait(LINE_WAIT);
		}

		if (all_done == true) {
			break;
		}
	}
}

task control() // works
{
	while (SENSOR_4 != 1);
	PlayToneEx(440, 150, SOUND_VOLUME, false);
	Wait(250);
	firsttick = CurrentTick();
	for (rt_pos = 0; rt_pos < route_length_short + 2; rt_pos++) {
		if (route_short[rt_pos].c == 's') {
			break;
		}
		if (desired_orientation(tolower(route_short[rt_pos].c), false) == true) {
			Wait(MECHANIC_WAIT_TIME);			
		}

		drive_forwards(route_short[rt_pos].n, route_short[rt_pos].p);
		
		if (tolower(route_short[rt_pos].c) != tolower(route_short[rt_pos + 1].c)) {
			Wait(MECHANIC_WAIT_TIME);
		}
	}
	lasttick = CurrentTick();
	ClearScreen();
	TextOut(LCD_POS1, LCD_LINE1, "Time was:");
	unsigned long elapsed = lasttick - firsttick;
	NumOut(LCD_POS1, LCD_LINE2, elapsed);
	done();
	Wait(10000);
	all_done = true;
}

task emergency_stop() // works
{
	while (true) {
		if (ButtonPressed(BTNCENTER, false)) {
			ClearScreen();
			Acquire(motor_control_mtx);
			Off(OUT_AC);
			string string1 = " ! EMERGENCY !";
			string string2 = " !!!! STOP !!!";
			string to_out1;
			string to_out2;
			ClearScreen();
			print_orientation();
			print_last_orientation();
			TextOut(LCD_POS1, LCD_LINE7, "Count:");
			NumOut(LCD_POS1, LCD_LINE8, rt_pos);
			for (int i = 0; i < 20; i++) {
				if (i % 2 == 0) {
					un_sensor();
					to_out1 = string1;
					to_out2 = string2;
					PlayToneEx(440, 75, SOUND_VOLUME, false);
				} else {
					init_sensors();
					to_out1 = string2;
					to_out2 = string1;
					PlayToneEx(440, 75, SOUND_VOLUME, false);
				}

				TextOut(LCD_POS1, LCD_LINE3, to_out1);
				TextOut(LCD_POS1, LCD_LINE6, to_out2);
				Wait(1000);
			}

			StopAllTasks();
		}
		if (all_done == true) {
			break;
		}
	}
}

task setup() // works
{
	init_sensors();
	auto_calibrate();
	PlayToneEx(440, 150, SOUND_VOLUME, false);
	Wait(250);
	PlayToneEx(440, 150, SOUND_VOLUME, false);
	Wait(300);
	Precedes(control, line_counter);
}

task routes() {
	init_route();
}

task main() // works
{
	Precedes(emergency_stop, routes, setup);
}

// task main()
// {
// 	init_sensors();
// 	auto_calibrate();
// 	OnRev(OUT_A, TURN_SPEED);
// 	OnFwd(OUT_C, TURN_SPEED);
// 	Precedes(emergency_stop, line_counter);
// }