int Kp = 10;
int Kd = 0.5;
int Ki = 0.2;
int Tp = 50;

mutex motor_control_mutex;

void init_sensors() {
	SetSensorType(S1, SENSOR_TYPE_LIGHT_ACTIVE);
	ResetSensor(S1);
	// Wait(333); // uncomment for coolness factor
	SetSensorType(S2, SENSOR_TYPE_LIGHT_ACTIVE);
	ResetSensor(S2);
	// Wait(333); // uncomment for coolness factor
	//SetSensorType(S3, SENSOR_TYPE_LIGHT_ACTIVE);
	//ResetSensor(S3);
	SetSensorTouch(S4);
	ResetSensor(S4);
}

long calibrate_black_white() {
	long white = SENSOR_1;
	long black = SENSOR_2;

	long offset = (white + black) / 2;
	//long offset = (white - black)/2 + black;
	return offset;
}

void pid(long offset) {
	int integral = 0;
	int last_error = 0;
	int derivative = 0;
	int error = 0;
	int left = 0;
	int right = 0;
	int turn = 0;
	int motor_a = 0;
	int motor_b = 0;
	while (true) {
		left = SENSOR_2;// SENSOR_2; 
		
		error = left - offset;
		integral += error;
		derivative = error - last_error;
		
		turn = 0.01 * (Kp * error + Ki * integral + Kd * derivative);
		motor_a = Tp + turn;
		motor_b = Tp - turn;
		OnRev(OUT_A, motor_a);
		OnRev(OUT_C, motor_b);
		/*ClearScreen();
		TextOut(0, LCD_LINE5, "Motor");
		TextOut(0, LCD_LINE4, "Offset");
		TextOut(0, LCD_LINE3, "Error");
		TextOut(0, LCD_LINE1, "Speed_A");
		TextOut(0, LCD_LINE2, "Speed_B");
		NumOut(64, LCD_LINE1, motor_a);
		NumOut(64, LCD_LINE2, motor_b);
		NumOut(64, LCD_LINE3, error);
		NumOut(64, LCD_LINE4, offset);
		NumOut(64, LCD_LINE5, turn);*/
		last_error = error;
		
		/*if (SENSOR_4 == 1) {
			Off(OUT_AC);
			Wait(50);
			while (SENSOR_4 != 1) {

			}
		}*/
		//Wait(20);
		
		/* simple on-off solution
		if (lv < offset) {
			OnRev(OUT_A, 50);
			OnRev(OUT_C, 25);
		} else {
			OnRev(OUT_A, 25);
			OnRev(OUT_C, 50);
		}*/
	}
}

task main() {
	init_sensors();
	long sensor1;
	long sensor2;
	long off;
	while (true) {
		if (SENSOR_4 == 1) {
			long offset = calibrate_black_white();
			pid(offset);
			break;
		} else {
			sensor1 = SENSOR_1;
			sensor2 = SENSOR_2;
			off = (sensor1 - sensor2) / 2 + sensor2;
			TextOut(0, LCD_LINE1, "White");
			TextOut(0, LCD_LINE2, "Black");
			TextOut(0, LCD_LINE3, "Offset");
			NumOut(64, LCD_LINE1, sensor1);
			NumOut(64, LCD_LINE2, sensor2);
			NumOut(64, LCD_LINE3, off);
		}
	}

	while (true);
}